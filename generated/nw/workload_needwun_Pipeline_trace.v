// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2019.1.2 (64-bit)
// Version: 2019.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module workload_needwun_Pipeline_trace (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SEQA_2,
        SEQA_address0,
        SEQA_ce0,
        SEQA_q0,
        alignedA_2,
        alignedA_address0,
        alignedA_ce0,
        alignedA_we0,
        alignedA_d0,
        SEQB_address0,
        SEQB_ce0,
        SEQB_q0,
        alignedB_address0,
        alignedB_ce0,
        alignedB_we0,
        alignedB_d0,
        ptr_address0,
        ptr_ce0,
        ptr_q0,
        a_str_idx_out,
        a_str_idx_out_ap_vld,
        b_str_idx_out,
        b_str_idx_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] SEQA_2;
output  [14:0] SEQA_address0;
output   SEQA_ce0;
input  [7:0] SEQA_q0;
input  [15:0] alignedA_2;
output  [15:0] alignedA_address0;
output   alignedA_ce0;
output   alignedA_we0;
output  [7:0] alignedA_d0;
output  [14:0] SEQB_address0;
output   SEQB_ce0;
input  [7:0] SEQB_q0;
output  [15:0] alignedB_address0;
output   alignedB_ce0;
output   alignedB_we0;
output  [7:0] alignedB_d0;
output  [14:0] ptr_address0;
output   ptr_ce0;
input  [6:0] ptr_q0;
output  [31:0] a_str_idx_out;
output   a_str_idx_out_ap_vld;
output  [31:0] b_str_idx_out;
output   b_str_idx_out_ap_vld;

reg ap_idle;
reg[14:0] SEQA_address0;
reg SEQA_ce0;
reg[15:0] alignedA_address0;
reg alignedA_ce0;
reg alignedA_we0;
reg[7:0] alignedA_d0;
reg[14:0] SEQB_address0;
reg SEQB_ce0;
reg[15:0] alignedB_address0;
reg alignedB_ce0;
reg alignedB_we0;
reg[7:0] alignedB_d0;
reg ptr_ce0;
reg a_str_idx_out_ap_vld;
reg b_str_idx_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] or_ln550_reg_617;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [14:0] grp_fu_239_p2;
reg   [14:0] reg_265;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln552_1_fu_372_p2;
wire   [0:0] and_ln558_fu_383_p2;
reg   [0:0] icmp_ln550_1_reg_612;
wire   [14:0] grp_fu_260_p2;
reg   [14:0] reg_269;
reg   [7:0] reg_273;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] and_ln552_1_reg_647;
reg   [0:0] and_ln558_reg_651;
reg   [0:0] icmp_ln550_1_reg_612_pp0_iter1_reg;
reg   [7:0] reg_278;
reg   [31:0] b_idx_1_reg_596;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] a_idx_1_reg_601;
wire   [0:0] icmp_ln550_fu_309_p2;
reg   [0:0] icmp_ln550_reg_606;
wire   [0:0] icmp_ln550_1_fu_315_p2;
wire   [0:0] or_ln550_fu_321_p2;
wire   [14:0] empty_fu_327_p1;
reg   [14:0] empty_reg_621;
wire   [14:0] empty_16_fu_331_p1;
reg   [14:0] empty_16_reg_626;
wire   [14:0] add_ln552_fu_353_p2;
reg   [14:0] add_ln552_reg_631;
reg   [6:0] ptr_load_reg_641;
wire    ap_block_pp0_stage3_11001;
wire   [15:0] add_ln564_fu_392_p2;
reg   [15:0] add_ln564_reg_655;
wire   [15:0] add_ln565_3_fu_401_p2;
reg   [15:0] add_ln565_3_reg_660;
wire   [15:0] add_ln559_3_fu_425_p2;
reg   [15:0] add_ln559_3_reg_665;
wire   [15:0] add_ln560_fu_434_p2;
reg   [15:0] add_ln560_reg_670;
wire   [15:0] add_ln553_3_fu_458_p2;
reg   [15:0] add_ln553_3_reg_675;
wire   [15:0] add_ln554_3_fu_467_p2;
reg   [15:0] add_ln554_3_reg_680;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln552_fu_359_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln564_fu_492_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln565_fu_496_p1;
wire   [63:0] zext_ln559_fu_501_p1;
wire   [63:0] zext_ln560_fu_506_p1;
wire   [63:0] zext_ln553_fu_510_p1;
wire   [63:0] zext_ln554_fu_515_p1;
wire   [63:0] zext_ln565_1_fu_520_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln559_1_fu_524_p1;
wire   [63:0] zext_ln553_1_fu_528_p1;
wire   [63:0] zext_ln554_1_fu_532_p1;
reg   [31:0] b_idx_fu_60;
wire   [31:0] grp_fu_229_p2;
wire    ap_loop_init;
reg   [31:0] a_idx_fu_64;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] b_str_idx_fu_68;
wire   [31:0] grp_fu_244_p2;
wire    ap_block_pp0_stage0;
reg   [31:0] a_str_idx_fu_72;
wire   [31:0] grp_fu_223_p2;
wire    ap_block_pp0_stage3_01001;
wire   [14:0] grp_fu_234_p2;
wire   [14:0] grp_fu_255_p2;
wire   [7:0] trunc_ln551_fu_335_p1;
wire   [14:0] add_ln552_1_fu_347_p2;
wire   [14:0] shl_ln1_fu_339_p3;
wire   [0:0] and_ln552_fu_368_p2;
wire   [0:0] icmp_ln552_fu_363_p2;
wire   [0:0] icmp_ln558_fu_378_p2;
wire   [15:0] trunc_ln564_fu_388_p1;
wire   [15:0] trunc_ln565_fu_397_p1;
wire   [15:0] trunc_ln559_fu_421_p1;
wire   [15:0] trunc_ln560_fu_430_p1;
wire   [15:0] trunc_ln553_fu_454_p1;
wire   [15:0] trunc_ln554_fu_463_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_240;
reg    ap_condition_215;
reg    ap_condition_553;
reg    ap_condition_556;
reg    ap_condition_561;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

workload_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_idx_fu_64 <= 32'd128;
    end else if ((((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln558_fu_383_p2)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        a_idx_fu_64 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_str_idx_fu_72 <= 32'd0;
    end else if ((((1'd0 == and_ln558_fu_383_p2) & (1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln550_1_reg_612 == 1'd1)) | ((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln558_fu_383_p2)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        a_str_idx_fu_72 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_idx_fu_60 <= 32'd128;
    end else if ((((1'd0 == and_ln558_fu_383_p2) & (1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln550_1_reg_612 == 1'd1)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        b_idx_fu_60 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_str_idx_fu_68 <= 32'd0;
    end else if ((((1'd0 == and_ln558_fu_383_p2) & (1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln550_1_reg_612 == 1'd1)) | ((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln558_fu_383_p2)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        b_str_idx_fu_68 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_idx_1_reg_601 <= a_idx_fu_64;
        b_idx_1_reg_596 <= b_idx_fu_60;
        icmp_ln550_1_reg_612 <= icmp_ln550_1_fu_315_p2;
        icmp_ln550_1_reg_612_pp0_iter1_reg <= icmp_ln550_1_reg_612;
        icmp_ln550_reg_606 <= icmp_ln550_fu_309_p2;
        or_ln550_reg_617 <= or_ln550_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln550_fu_321_p2 == 1'd1))) begin
        add_ln552_reg_631 <= add_ln552_fu_353_p2;
        empty_16_reg_626 <= empty_16_fu_331_p1;
        empty_reg_621 <= empty_fu_327_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2))) begin
        add_ln553_3_reg_675 <= add_ln553_3_fu_458_p2;
        add_ln554_3_reg_680 <= add_ln554_3_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln558_fu_383_p2))) begin
        add_ln559_3_reg_665 <= add_ln559_3_fu_425_p2;
        add_ln560_reg_670 <= add_ln560_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln558_fu_383_p2) & (1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln550_1_reg_612 == 1'd1))) begin
        add_ln564_reg_655 <= add_ln564_fu_392_p2;
        add_ln565_3_reg_660 <= add_ln565_3_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln552_1_reg_647 <= and_ln552_1_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln558_reg_651 <= and_ln558_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ptr_load_reg_641 <= ptr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln558_fu_383_p2) & (1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln550_1_reg_612 == 1'd1)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        reg_265 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln552_1_fu_372_p2) & (or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln558_fu_383_p2)) | ((or_ln550_reg_617 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln552_1_fu_372_p2)))) begin
        reg_269 <= grp_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln550_1_reg_612_pp0_iter1_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln552_1_reg_647)))) begin
        reg_273 <= SEQB_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln558_reg_651)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln552_1_reg_647)))) begin
        reg_278 <= SEQA_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_240)) begin
        if ((1'd1 == and_ln552_1_reg_647)) begin
            SEQA_address0 = zext_ln553_fu_510_p1;
        end else if (((1'd0 == and_ln552_1_reg_647) & (1'd1 == and_ln558_reg_651))) begin
            SEQA_address0 = zext_ln559_fu_501_p1;
        end else begin
            SEQA_address0 = 'bx;
        end
    end else begin
        SEQA_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln558_reg_651)))) begin
        SEQA_ce0 = 1'b1;
    end else begin
        SEQA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_240)) begin
        if ((1'd1 == and_ln552_1_reg_647)) begin
            SEQB_address0 = zext_ln554_fu_515_p1;
        end else if ((1'b1 == ap_condition_215)) begin
            SEQB_address0 = zext_ln565_fu_496_p1;
        end else begin
            SEQB_address0 = 'bx;
        end
    end else begin
        SEQB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln550_1_reg_612 == 1'd1)))) begin
        SEQB_ce0 = 1'b1;
    end else begin
        SEQB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln550_reg_617 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_str_idx_out_ap_vld = 1'b1;
    end else begin
        a_str_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_556)) begin
            alignedA_address0 = zext_ln553_1_fu_528_p1;
        end else if ((1'b1 == ap_condition_553)) begin
            alignedA_address0 = zext_ln559_1_fu_524_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            alignedA_address0 = zext_ln564_fu_492_p1;
        end else begin
            alignedA_address0 = 'bx;
        end
    end else begin
        alignedA_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln558_reg_651)))) begin
        alignedA_ce0 = 1'b1;
    end else begin
        alignedA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln558_reg_651)))) begin
        alignedA_d0 = reg_278;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        alignedA_d0 = 8'd45;
    end else begin
        alignedA_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln550_1_reg_612 == 1'd1)) | ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln558_reg_651)))) begin
        alignedA_we0 = 1'b1;
    end else begin
        alignedA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_556)) begin
            alignedB_address0 = zext_ln554_1_fu_532_p1;
        end else if ((1'b1 == ap_condition_561)) begin
            alignedB_address0 = zext_ln565_1_fu_520_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            alignedB_address0 = zext_ln560_fu_506_p1;
        end else begin
            alignedB_address0 = 'bx;
        end
    end else begin
        alignedB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln550_1_reg_612_pp0_iter1_reg == 1'd1)))) begin
        alignedB_ce0 = 1'b1;
    end else begin
        alignedB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln550_1_reg_612_pp0_iter1_reg == 1'd1)))) begin
        alignedB_d0 = reg_273;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        alignedB_d0 = 8'd45;
    end else begin
        alignedB_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647)) | ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln550_1_reg_612_pp0_iter1_reg == 1'd1)) | ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln558_reg_651)))) begin
        alignedB_we0 = 1'b1;
    end else begin
        alignedB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln550_reg_617 == 1'd0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln550_reg_617 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        b_str_idx_out_ap_vld = 1'b1;
    end else begin
        b_str_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ptr_ce0 = 1'b1;
    end else begin
        ptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_str_idx_out = a_str_idx_fu_72;

assign add_ln552_1_fu_347_p2 = (empty_fu_327_p1 + empty_16_fu_331_p1);

assign add_ln552_fu_353_p2 = (add_ln552_1_fu_347_p2 + shl_ln1_fu_339_p3);

assign add_ln553_3_fu_458_p2 = (trunc_ln553_fu_454_p1 + alignedA_2);

assign add_ln554_3_fu_467_p2 = (trunc_ln554_fu_463_p1 + alignedA_2);

assign add_ln559_3_fu_425_p2 = (trunc_ln559_fu_421_p1 + alignedA_2);

assign add_ln560_fu_434_p2 = (trunc_ln560_fu_430_p1 + alignedA_2);

assign add_ln564_fu_392_p2 = (trunc_ln564_fu_388_p1 + alignedA_2);

assign add_ln565_3_fu_401_p2 = (trunc_ln565_fu_397_p1 + alignedA_2);

assign and_ln552_1_fu_372_p2 = (icmp_ln552_fu_363_p2 & and_ln552_fu_368_p2);

assign and_ln552_fu_368_p2 = (icmp_ln550_reg_606 & icmp_ln550_1_reg_612);

assign and_ln558_fu_383_p2 = (icmp_ln558_fu_378_p2 & icmp_ln550_reg_606);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_215 = ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (icmp_ln550_1_reg_612 == 1'd1));
end

always @ (*) begin
    ap_condition_240 = ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_553 = ((1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln558_reg_651));
end

always @ (*) begin
    ap_condition_556 = ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln552_1_reg_647));
end

always @ (*) begin
    ap_condition_561 = ((1'd0 == and_ln558_reg_651) & (1'd0 == and_ln552_1_reg_647) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln550_1_reg_612_pp0_iter1_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign b_str_idx_out = b_str_idx_fu_68;

assign empty_16_fu_331_p1 = b_idx_fu_60[14:0];

assign empty_fu_327_p1 = a_idx_fu_64[14:0];

assign grp_fu_223_p2 = (a_str_idx_fu_72 + 32'd1);

assign grp_fu_229_p2 = ($signed(b_idx_1_reg_596) + $signed(32'd4294967295));

assign grp_fu_234_p2 = ($signed(empty_16_reg_626) + $signed(15'd32767));

assign grp_fu_239_p2 = (grp_fu_234_p2 + SEQA_2);

assign grp_fu_244_p2 = (b_str_idx_fu_68 + 32'd1);

assign grp_fu_250_p2 = ($signed(a_idx_1_reg_601) + $signed(32'd4294967295));

assign grp_fu_255_p2 = ($signed(empty_reg_621) + $signed(15'd32767));

assign grp_fu_260_p2 = (grp_fu_255_p2 + SEQA_2);

assign icmp_ln550_1_fu_315_p2 = (($signed(b_idx_fu_60) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln550_fu_309_p2 = (($signed(a_idx_fu_64) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln552_fu_363_p2 = ((ptr_load_reg_641 == 7'd92) ? 1'b1 : 1'b0);

assign icmp_ln558_fu_378_p2 = ((ptr_load_reg_641 == 7'd60) ? 1'b1 : 1'b0);

assign or_ln550_fu_321_p2 = (icmp_ln550_fu_309_p2 | icmp_ln550_1_fu_315_p2);

assign ptr_address0 = zext_ln552_fu_359_p1;

assign shl_ln1_fu_339_p3 = {{trunc_ln551_fu_335_p1}, {7'd0}};

assign trunc_ln551_fu_335_p1 = b_idx_fu_60[7:0];

assign trunc_ln553_fu_454_p1 = a_str_idx_fu_72[15:0];

assign trunc_ln554_fu_463_p1 = b_str_idx_fu_68[15:0];

assign trunc_ln559_fu_421_p1 = a_str_idx_fu_72[15:0];

assign trunc_ln560_fu_430_p1 = b_str_idx_fu_68[15:0];

assign trunc_ln564_fu_388_p1 = a_str_idx_fu_72[15:0];

assign trunc_ln565_fu_397_p1 = b_str_idx_fu_68[15:0];

assign zext_ln552_fu_359_p1 = add_ln552_reg_631;

assign zext_ln553_1_fu_528_p1 = add_ln553_3_reg_675;

assign zext_ln553_fu_510_p1 = reg_269;

assign zext_ln554_1_fu_532_p1 = add_ln554_3_reg_680;

assign zext_ln554_fu_515_p1 = reg_265;

assign zext_ln559_1_fu_524_p1 = add_ln559_3_reg_665;

assign zext_ln559_fu_501_p1 = reg_269;

assign zext_ln560_fu_506_p1 = add_ln560_reg_670;

assign zext_ln564_fu_492_p1 = add_ln564_reg_655;

assign zext_ln565_1_fu_520_p1 = add_ln565_3_reg_660;

assign zext_ln565_fu_496_p1 = reg_265;

endmodule //workload_needwun_Pipeline_trace
