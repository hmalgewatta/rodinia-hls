// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2019.1.2 (64-bit)
// Version: 2019.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="workload_workload,hls_ip_2019_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1761-3,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.985000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=78,HLS_SYN_DSP=0,HLS_SYN_FF=1257,HLS_SYN_LUT=2300,HLS_VERSION=2019_1_2}" *)

module workload (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SEQA_address0,
        SEQA_ce0,
        SEQA_q0,
        SEQB_address0,
        SEQB_ce0,
        SEQB_q0,
        alignedA_address0,
        alignedA_ce0,
        alignedA_we0,
        alignedA_d0,
        alignedB_address0,
        alignedB_ce0,
        alignedB_we0,
        alignedB_d0,
        num_jobs
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] SEQA_address0;
output   SEQA_ce0;
input  [7:0] SEQA_q0;
output  [14:0] SEQB_address0;
output   SEQB_ce0;
input  [7:0] SEQB_q0;
output  [15:0] alignedA_address0;
output   alignedA_ce0;
output   alignedA_we0;
output  [7:0] alignedA_d0;
output  [15:0] alignedB_address0;
output   alignedB_ce0;
output   alignedB_we0;
output  [7:0] alignedB_d0;
input  [31:0] num_jobs;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] shl_ln_fu_105_p3;
reg   [14:0] shl_ln_reg_143;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln598_fu_90_p2;
wire   [15:0] shl_ln599_1_fu_114_p3;
reg   [15:0] shl_ln599_1_reg_148;
wire   [31:0] M_q0;
wire   [6:0] ptr_q0;
wire    grp_needwun_fu_66_ap_start;
wire    grp_needwun_fu_66_ap_done;
wire    grp_needwun_fu_66_ap_idle;
wire    grp_needwun_fu_66_ap_ready;
wire   [14:0] grp_needwun_fu_66_SEQA_address0;
wire    grp_needwun_fu_66_SEQA_ce0;
wire   [14:0] grp_needwun_fu_66_SEQB_address0;
wire    grp_needwun_fu_66_SEQB_ce0;
wire   [15:0] grp_needwun_fu_66_alignedA_address0;
wire    grp_needwun_fu_66_alignedA_ce0;
wire    grp_needwun_fu_66_alignedA_we0;
wire   [7:0] grp_needwun_fu_66_alignedA_d0;
wire   [15:0] grp_needwun_fu_66_alignedB_address0;
wire    grp_needwun_fu_66_alignedB_ce0;
wire    grp_needwun_fu_66_alignedB_we0;
wire   [7:0] grp_needwun_fu_66_alignedB_d0;
wire   [14:0] grp_needwun_fu_66_M_address0;
wire    grp_needwun_fu_66_M_ce0;
wire    grp_needwun_fu_66_M_we0;
wire   [31:0] grp_needwun_fu_66_M_d0;
wire   [14:0] grp_needwun_fu_66_ptr_address0;
wire    grp_needwun_fu_66_ptr_ce0;
wire    grp_needwun_fu_66_ptr_we0;
wire   [6:0] grp_needwun_fu_66_ptr_d0;
reg    grp_needwun_fu_66_ap_start_reg;
wire    ap_CS_fsm_state3;
reg   [31:0] i_fu_48;
wire   [31:0] add_ln598_fu_95_p2;
wire   [7:0] trunc_ln599_fu_101_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_needwun_fu_66_ap_start_reg = 1'b0;
end

workload_M_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16641 ),
    .AddressWidth( 15 ))
M_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_needwun_fu_66_M_address0),
    .ce0(grp_needwun_fu_66_M_ce0),
    .we0(grp_needwun_fu_66_M_we0),
    .d0(grp_needwun_fu_66_M_d0),
    .q0(M_q0)
);

workload_ptr_RAM_AUTO_1R1W #(
    .DataWidth( 7 ),
    .AddressRange( 16641 ),
    .AddressWidth( 15 ))
ptr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_needwun_fu_66_ptr_address0),
    .ce0(grp_needwun_fu_66_ptr_ce0),
    .we0(grp_needwun_fu_66_ptr_we0),
    .d0(grp_needwun_fu_66_ptr_d0),
    .q0(ptr_q0)
);

workload_needwun grp_needwun_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_needwun_fu_66_ap_start),
    .ap_done(grp_needwun_fu_66_ap_done),
    .ap_idle(grp_needwun_fu_66_ap_idle),
    .ap_ready(grp_needwun_fu_66_ap_ready),
    .SEQA_address0(grp_needwun_fu_66_SEQA_address0),
    .SEQA_ce0(grp_needwun_fu_66_SEQA_ce0),
    .SEQA_q0(SEQA_q0),
    .SEQA_2(shl_ln_reg_143),
    .SEQB_address0(grp_needwun_fu_66_SEQB_address0),
    .SEQB_ce0(grp_needwun_fu_66_SEQB_ce0),
    .SEQB_q0(SEQB_q0),
    .alignedA_address0(grp_needwun_fu_66_alignedA_address0),
    .alignedA_ce0(grp_needwun_fu_66_alignedA_ce0),
    .alignedA_we0(grp_needwun_fu_66_alignedA_we0),
    .alignedA_d0(grp_needwun_fu_66_alignedA_d0),
    .alignedA_2(shl_ln599_1_reg_148),
    .alignedB_address0(grp_needwun_fu_66_alignedB_address0),
    .alignedB_ce0(grp_needwun_fu_66_alignedB_ce0),
    .alignedB_we0(grp_needwun_fu_66_alignedB_we0),
    .alignedB_d0(grp_needwun_fu_66_alignedB_d0),
    .M_address0(grp_needwun_fu_66_M_address0),
    .M_ce0(grp_needwun_fu_66_M_ce0),
    .M_we0(grp_needwun_fu_66_M_we0),
    .M_d0(grp_needwun_fu_66_M_d0),
    .M_q0(M_q0),
    .ptr_address0(grp_needwun_fu_66_ptr_address0),
    .ptr_ce0(grp_needwun_fu_66_ptr_ce0),
    .ptr_we0(grp_needwun_fu_66_ptr_we0),
    .ptr_d0(grp_needwun_fu_66_ptr_d0),
    .ptr_q0(ptr_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_needwun_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln598_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_needwun_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_needwun_fu_66_ap_ready == 1'b1)) begin
            grp_needwun_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_48 <= 32'd0;
    end else if (((icmp_ln598_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_48 <= add_ln598_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln598_fu_90_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln599_1_reg_148[15 : 8] <= shl_ln599_1_fu_114_p3[15 : 8];
        shl_ln_reg_143[14 : 7] <= shl_ln_fu_105_p3[14 : 7];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_needwun_fu_66_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln598_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln598_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln598_fu_90_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_needwun_fu_66_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SEQA_address0 = grp_needwun_fu_66_SEQA_address0;

assign SEQA_ce0 = grp_needwun_fu_66_SEQA_ce0;

assign SEQB_address0 = grp_needwun_fu_66_SEQB_address0;

assign SEQB_ce0 = grp_needwun_fu_66_SEQB_ce0;

assign add_ln598_fu_95_p2 = (i_fu_48 + 32'd1);

assign alignedA_address0 = grp_needwun_fu_66_alignedA_address0;

assign alignedA_ce0 = grp_needwun_fu_66_alignedA_ce0;

assign alignedA_d0 = grp_needwun_fu_66_alignedA_d0;

assign alignedA_we0 = grp_needwun_fu_66_alignedA_we0;

assign alignedB_address0 = grp_needwun_fu_66_alignedB_address0;

assign alignedB_ce0 = grp_needwun_fu_66_alignedB_ce0;

assign alignedB_d0 = grp_needwun_fu_66_alignedB_d0;

assign alignedB_we0 = grp_needwun_fu_66_alignedB_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_needwun_fu_66_ap_start = grp_needwun_fu_66_ap_start_reg;

assign icmp_ln598_fu_90_p2 = ((i_fu_48 == num_jobs) ? 1'b1 : 1'b0);

assign shl_ln599_1_fu_114_p3 = {{trunc_ln599_fu_101_p1}, {8'd0}};

assign shl_ln_fu_105_p3 = {{trunc_ln599_fu_101_p1}, {7'd0}};

assign trunc_ln599_fu_101_p1 = i_fu_48[7:0];

always @ (posedge ap_clk) begin
    shl_ln_reg_143[6:0] <= 7'b0000000;
    shl_ln599_1_reg_148[7:0] <= 8'b00000000;
end

endmodule //workload
