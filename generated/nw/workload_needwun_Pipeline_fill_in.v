// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2019.1.2 (64-bit)
// Version: 2019.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module workload_needwun_Pipeline_fill_in (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        M_load,
        SEQA_2,
        SEQA_address0,
        SEQA_ce0,
        SEQA_q0,
        SEQB_load,
        p_cast3,
        M_address0,
        M_ce0,
        M_we0,
        M_d0,
        M_q0,
        zext_ln516,
        p_shl2,
        ptr_address0,
        ptr_ce0,
        ptr_we0,
        ptr_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] M_load;
input  [14:0] SEQA_2;
output  [14:0] SEQA_address0;
output   SEQA_ce0;
input  [7:0] SEQA_q0;
input  [7:0] SEQB_load;
input  [13:0] p_cast3;
output  [14:0] M_address0;
output   M_ce0;
output   M_we0;
output  [31:0] M_d0;
input  [31:0] M_q0;
input  [7:0] zext_ln516;
input  [14:0] p_shl2;
output  [14:0] ptr_address0;
output   ptr_ce0;
output   ptr_we0;
output  [6:0] ptr_d0;

reg ap_idle;
reg SEQA_ce0;
reg[14:0] M_address0;
reg M_ce0;
reg M_we0;
reg ptr_ce0;
reg ptr_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln517_reg_455;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] reg_173;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] zext_ln516_cast_fu_177_p1;
reg   [8:0] zext_ln516_cast_reg_444;
reg   [7:0] a_idx_reg_449;
wire   [0:0] icmp_ln517_fu_208_p2;
wire   [14:0] add_ln518_1_fu_228_p2;
reg   [14:0] add_ln518_1_reg_459;
wire   [14:0] add_ln527_fu_234_p2;
reg   [14:0] add_ln527_reg_464;
wire   [14:0] add_ln528_fu_240_p2;
reg   [14:0] add_ln528_reg_469;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln518_fu_257_p2;
reg   [0:0] icmp_ln518_reg_484;
wire   [63:0] zext_ln527_fu_262_p1;
reg   [63:0] zext_ln527_reg_489;
wire   [8:0] add_ln533_1_fu_266_p2;
reg   [8:0] add_ln533_1_reg_499;
wire   [0:0] addr_cmp_fu_287_p2;
reg   [0:0] addr_cmp_reg_504;
wire   [31:0] up_fu_292_p2;
reg   [31:0] up_reg_509;
wire   [31:0] left_fu_298_p2;
reg   [31:0] left_reg_515;
wire   [0:0] icmp_ln531_fu_304_p2;
reg   [0:0] icmp_ln531_reg_521;
wire   [31:0] up_left_fu_327_p2;
reg   [31:0] up_left_reg_526;
wire   [31:0] select_ln531_fu_333_p3;
reg   [31:0] select_ln531_reg_531;
wire   [0:0] icmp_ln531_1_fu_338_p2;
reg   [0:0] icmp_ln531_1_reg_536;
wire   [31:0] max_fu_344_p3;
reg   [31:0] max_reg_541;
wire   [63:0] zext_ln533_1_fu_357_p1;
reg   [63:0] zext_ln533_1_reg_546;
wire   [0:0] icmp_ln534_fu_371_p2;
reg   [0:0] icmp_ln534_reg_552;
wire   [0:0] icmp_ln536_fu_376_p2;
reg   [0:0] icmp_ln536_reg_558;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln518_1_fu_246_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln528_fu_250_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg_fu_66;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_70;
reg   [7:0] a_idx_2_fu_74;
wire   [7:0] add_ln517_fu_271_p2;
reg   [7:0] ap_sig_allocacmp_a_idx;
reg   [31:0] max_1_fu_78;
wire   [7:0] add_ln518_fu_218_p2;
wire   [14:0] zext_ln518_fu_224_p1;
wire   [14:0] p_cast3_cast_fu_181_p1;
wire   [14:0] a_idx_2_cast_fu_214_p1;
wire   [8:0] a_idx_2_cast5_fu_254_p1;
wire   [31:0] reuse_select_fu_320_p3;
wire   [31:0] select_ln527_fu_310_p3;
wire   [14:0] zext_ln533_fu_349_p1;
wire   [14:0] add_ln533_fu_352_p2;
wire   [0:0] or_ln534_fu_393_p2;
wire   [6:0] select_ln534_fu_386_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

workload_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_idx_2_fu_74 <= 8'd1;
    end else if (((icmp_ln517_reg_455 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_idx_2_fu_74 <= add_ln517_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_1_fu_78 <= M_load;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        max_1_fu_78 <= max_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reuse_addr_reg_fu_66 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reuse_addr_reg_fu_66 <= zext_ln533_1_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reuse_reg_fu_70 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reuse_reg_fu_70 <= max_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_idx_reg_449 <= ap_sig_allocacmp_a_idx;
        addr_cmp_reg_504 <= addr_cmp_fu_287_p2;
        icmp_ln517_reg_455 <= icmp_ln517_fu_208_p2;
        icmp_ln531_reg_521 <= icmp_ln531_fu_304_p2;
        left_reg_515 <= left_fu_298_p2;
        up_reg_509 <= up_fu_292_p2;
        zext_ln516_cast_reg_444[7 : 0] <= zext_ln516_cast_fu_177_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln517_fu_208_p2 == 1'd0))) begin
        add_ln518_1_reg_459 <= add_ln518_1_fu_228_p2;
        add_ln527_reg_464 <= add_ln527_fu_234_p2;
        add_ln528_reg_469 <= add_ln528_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln517_reg_455 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln533_1_reg_499 <= add_ln533_1_fu_266_p2;
        icmp_ln518_reg_484 <= icmp_ln518_fu_257_p2;
        zext_ln527_reg_489[14 : 0] <= zext_ln527_fu_262_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln531_1_reg_536 <= icmp_ln531_1_fu_338_p2;
        select_ln531_reg_531 <= select_ln531_fu_333_p3;
        up_left_reg_526 <= up_left_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln534_reg_552 <= icmp_ln534_fu_371_p2;
        icmp_ln536_reg_558 <= icmp_ln536_fu_376_p2;
        max_reg_541 <= max_fu_344_p3;
        zext_ln533_1_reg_546[14 : 0] <= zext_ln533_1_fu_357_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln517_reg_455 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_173 <= M_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_address0 = zext_ln533_1_reg_546;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        M_address0 = zext_ln527_fu_262_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        M_address0 = zext_ln528_fu_250_p1;
    end else begin
        M_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        M_we0 = 1'b1;
    end else begin
        M_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        SEQA_ce0 = 1'b1;
    end else begin
        SEQA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln517_reg_455 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln517_reg_455 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_a_idx = 8'd1;
    end else begin
        ap_sig_allocacmp_a_idx = a_idx_2_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptr_ce0 = 1'b1;
    end else begin
        ptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ptr_we0 = 1'b1;
    end else begin
        ptr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_d0 = max_reg_541;

assign SEQA_address0 = zext_ln518_1_fu_246_p1;

assign a_idx_2_cast5_fu_254_p1 = a_idx_reg_449;

assign a_idx_2_cast_fu_214_p1 = ap_sig_allocacmp_a_idx;

assign add_ln517_fu_271_p2 = (a_idx_reg_449 + 8'd1);

assign add_ln518_1_fu_228_p2 = (zext_ln518_fu_224_p1 + SEQA_2);

assign add_ln518_fu_218_p2 = ($signed(ap_sig_allocacmp_a_idx) + $signed(8'd255));

assign add_ln527_fu_234_p2 = (zext_ln518_fu_224_p1 + p_cast3_cast_fu_181_p1);

assign add_ln528_fu_240_p2 = (a_idx_2_cast_fu_214_p1 + p_cast3_cast_fu_181_p1);

assign add_ln533_1_fu_266_p2 = (zext_ln516_cast_reg_444 + a_idx_2_cast5_fu_254_p1);

assign add_ln533_fu_352_p2 = (zext_ln533_fu_349_p1 + p_shl2);

assign addr_cmp_fu_287_p2 = ((reuse_addr_reg_fu_66 == zext_ln527_reg_489) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign icmp_ln517_fu_208_p2 = ((ap_sig_allocacmp_a_idx == 8'd129) ? 1'b1 : 1'b0);

assign icmp_ln518_fu_257_p2 = ((SEQA_q0 == SEQB_load) ? 1'b1 : 1'b0);

assign icmp_ln531_1_fu_338_p2 = (($signed(up_left_fu_327_p2) > $signed(select_ln531_fu_333_p3)) ? 1'b1 : 1'b0);

assign icmp_ln531_fu_304_p2 = (($signed(up_fu_292_p2) > $signed(left_fu_298_p2)) ? 1'b1 : 1'b0);

assign icmp_ln534_fu_371_p2 = ((left_reg_515 == max_fu_344_p3) ? 1'b1 : 1'b0);

assign icmp_ln536_fu_376_p2 = ((max_fu_344_p3 == up_reg_509) ? 1'b1 : 1'b0);

assign left_fu_298_p2 = ($signed(max_1_fu_78) + $signed(32'd4294967295));

assign max_fu_344_p3 = ((icmp_ln531_1_reg_536[0:0] == 1'b1) ? up_left_reg_526 : select_ln531_reg_531);

assign or_ln534_fu_393_p2 = (icmp_ln536_reg_558 | icmp_ln534_reg_552);

assign p_cast3_cast_fu_181_p1 = p_cast3;

assign ptr_address0 = zext_ln533_1_reg_546;

assign ptr_d0 = ((or_ln534_fu_393_p2[0:0] == 1'b1) ? select_ln534_fu_386_p3 : 7'd92);

assign reuse_select_fu_320_p3 = ((addr_cmp_reg_504[0:0] == 1'b1) ? reuse_reg_fu_70 : reg_173);

assign select_ln527_fu_310_p3 = ((icmp_ln518_reg_484[0:0] == 1'b1) ? 32'd1 : 32'd4294967295);

assign select_ln531_fu_333_p3 = ((icmp_ln531_reg_521[0:0] == 1'b1) ? up_reg_509 : left_reg_515);

assign select_ln534_fu_386_p3 = ((icmp_ln534_reg_552[0:0] == 1'b1) ? 7'd60 : 7'd94);

assign up_fu_292_p2 = ($signed(reg_173) + $signed(32'd4294967295));

assign up_left_fu_327_p2 = (reuse_select_fu_320_p3 + select_ln527_fu_310_p3);

assign zext_ln516_cast_fu_177_p1 = zext_ln516;

assign zext_ln518_1_fu_246_p1 = add_ln518_1_reg_459;

assign zext_ln518_fu_224_p1 = add_ln518_fu_218_p2;

assign zext_ln527_fu_262_p1 = add_ln527_reg_464;

assign zext_ln528_fu_250_p1 = add_ln528_reg_469;

assign zext_ln533_1_fu_357_p1 = add_ln533_fu_352_p2;

assign zext_ln533_fu_349_p1 = add_ln533_1_reg_499;

always @ (posedge ap_clk) begin
    zext_ln516_cast_reg_444[8] <= 1'b0;
    zext_ln527_reg_489[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln533_1_reg_546[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //workload_needwun_Pipeline_fill_in
